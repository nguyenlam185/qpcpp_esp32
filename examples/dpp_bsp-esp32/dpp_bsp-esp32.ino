//$file${.::main.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: dpp_bsp-esp32.qm
// File:  ${.::main.cpp}
//
// This code has been generated by QM 7.0.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::main.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"  // QP-C++ framework
#include "dpp.hpp"    // DPP application
#include "bsp.hpp"    // Board Support Package

using namespace QP;
static constexpr unsigned stack_size = 2048;

Q_DEFINE_THIS_FILE

//............................................................................
void setup() {
    QF::init(); // initialize the framework
    BSP::init(); // initialize the Board Support Package

    // init publish-subscribe
    static QSubscrList subscrSto[MAX_PUB_SIG];
    QF::psInit(subscrSto, Q_DIM(subscrSto));

    // initialize event pools...
    static QF_MPOOL_EL(TableEvt) smlPoolSto[2*N_PHILO];
    QF::poolInit(smlPoolSto,
                 sizeof(smlPoolSto), sizeof(smlPoolSto[0]));

    // start all active objects...

    // start Philos
    static QP::QEvt const *philoQueueSto[10][N_PHILO];
    static StackType_t philoStack[10][stack_size];
    for (uint8_t n = 0U; n < N_PHILO; ++n) {
        AO_Philo[n]->start((uint_fast8_t)(n + 1U), // priority
            philoQueueSto[n],
            Q_DIM(philoQueueSto[n]),
            philoStack[n],
            stack_size);
    }
    // start Table
    static QP::QEvt const *tableQueueSto[N_PHILO];
    static StackType_t tableStack[stack_size];
    AO_Table->start(
        (uint_fast8_t)(N_PHILO + 1U), // priority
        tableQueueSto,
        Q_DIM(tableQueueSto),
        tableStack,
        stack_size);
    QF::run(); // run the QF/C++ framework
}

//............................................................................
void loop() {
}

