<?xml version="1.0" encoding="UTF-8"?>
<model version="7.0.1" links="0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm7.xsd">
 <documentation>This is a little more advanced Blinky example for the Arduino ESP32 board. The example demonstrates:

1. One active object class &quot;Blinky&quot; (inside the package &quot;AOs&quot;)
2. A simple state machine
3. The Board Support Package (BSP), see below.

----
# Board configuration:

The external LED needs to be connected between the pins GND and 13, with the short LEG leg at the GND pin.

----
# More info

This example demonstrates the concept of the Board Support Package (BSP), which separates the &quot;What&quot; needs to be done from &quot;How&quot; this is done. The BSP consists of two files &quot;bsp.h&quot; and &quot;bsp.cpp&quot;. The application (active objects) need to include only the &quot;bsp.h&quot; header file and the state machines call only the BSP functions, but don't interact with the hardware directly.

This structure of the code is recommended for applications with only one active object. (See also the dpp_bsp example).</documentation>
 <framework name="qpcpp"/>
 <package name="AOs" stereotype="0x02">
  <class name="Blinky" superclass="qpcpp::QActive">
   <attribute name="m_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <attribute name="instance" type="Blinky" visibility="0x00" properties="0x01">
    <documentation>static class instance (Singleton)</documentation>
   </attribute>
   <operation name="Blinky" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;Blinky::initial)),
    m_timeEvt(this, TIMEOUT_SIG, 0U)</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action>(void)e; // unused parameter
m_timeEvt.armX(BSP::TICKS_PER_SEC/2, BSP::TICKS_PER_SEC/2);

QS_OBJ_DICTIONARY(&amp;Blinky::instance);
QS_SIG_DICTIONARY(TIMEOUT_SIG, nullptr);</action>
     <initial_glyph conn="2,2,5,1,20,8,-4">
      <action box="0,-2,32,6"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry>BSP::ledOff();</entry>
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="2,16,3,1,18,8,-2">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,8,16,10">
      <entry box="0,3,12,4"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry>BSP::ledOn();</entry>
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="2,30,3,1,20,-17,-4">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,22,16,10">
      <entry box="0,3,12,4"/>
     </state_glyph>
    </state>
    <state_diagram size="34,34"/>
   </statechart>
  </class>
  <attribute name="AO_Blinky" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <documentation>the opaque pointer to the Blinky AO</documentation>
   <code>= &amp;Blinky::instance;</code>
  </attribute>
 </package>
 <directory name=".">
  <file name="bsp.hpp">
   <text>#ifndef BSP_HPP
#define BSP_HPP

namespace BSP {
    enum { TICKS_PER_SEC = CONFIG_FREERTOS_HZ} ;
    void init(void);
    void ledOff(void);
    void ledOn(void);
}

#endif // BSP_HPP
</text>
  </file>
  <file name="bsp.cpp">
   <text>#include &quot;qpcpp.hpp&quot;   // QP-C++ framework
#include &quot;blinky.hpp&quot;  // Blinky application interface
#include &quot;bsp.hpp&quot;     // Board Support Package (BSP)
#include &quot;Arduino.h&quot;
#include &quot;esp_freertos_hooks.h&quot;

// If current ESP32 board does not define LED_BUILTIN
#ifndef LED_BUILTIN
#define LED_BUILTIN 2U
#endif

static void tickHook_ESP32(void); /*Tick hook for QP */
static uint8_t const l_TickHook = static_cast&lt;uint8_t&gt;(0);

static void tickHook_ESP32(void)
{
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    /* process time events for rate 0 */
    QP::QTimeEvt::TICK_FROM_ISR(&amp;xHigherPriorityTaskWoken, &amp;l_TickHook);
    /* notify FreeRTOS to perform context switch from ISR, if needed */
    if(xHigherPriorityTaskWoken) {
        portYIELD_FROM_ISR();
    }
}
//............................................................................
void QP::QF::onStartup(void) {
    esp_register_freertos_tick_hook_for_cpu(tickHook_ESP32, QP_CPU_NUM);
    QS_OBJ_DICTIONARY(&amp;l_TickHook);
}
//............................................................................
extern &quot;C&quot; Q_NORETURN Q_onAssert(char const * const module, int location) {
    //
    // NOTE: add here your application-specific error handling
    //
    (void)module;
    (void)location;
    Serial.print(&quot;QP Assert module: &quot;);
    Serial.print(module);
    Serial.print(&quot;@ &quot;);
    Serial.println(location);
    QF_INT_DISABLE(); // disable all interrupts
    for (;;) { // sit in an endless loop for now
    }
}
//............................................................................
namespace BSP {
void init(void) {
    // initialize the hardware used in this sketch...
    // NOTE: interrupts are configured and started later in QF::onStartup()
    pinMode(LED_BUILTIN, OUTPUT);
    Serial.begin(115200); // run serial port at 115200 baud rate
    QS_INIT(nullptr);
}
//............................................................................
void ledOff(void) {
    digitalWrite(LED_BUILTIN, LOW);
    Serial.println(&quot;led off&quot;);
}
//............................................................................
void ledOn(void) {
    digitalWrite(LED_BUILTIN, HIGH);
    Serial.println(&quot;led on&quot;);
}
} // namespace BSP</text>
  </file>
  <file name="blinky.hpp">
   <text>#ifndef BLINKY_HPP
#define BLINKY_HPP

enum BlinkySignals {
    TIMEOUT_SIG = QP::Q_USER_SIG,
    MAX_SIG
};

// genearate declarations of all opaque AO pointers
$declare${AOs::AO_Blinky}
//...

#endif // BLINKY_HPP
</text>
  </file>
  <file name="blinky_bsp-esp32.ino">
   <text>#include &quot;qpcpp.hpp&quot;   // QP-C++ framework
#include &quot;blinky.hpp&quot;  // Blinky application interface
#include &quot;bsp.hpp&quot;     // Board Support Package (BSP)

using namespace QP;
static constexpr unsigned stack_size = 1700;
//............................................................................
void setup() {
    QF::init(); // initialize the framework
    BSP::init(); // initialize the BSP

    // initialize event pools
    static QF_MPOOL_EL(QP::QEvt) smlPoolSto[20];
    QP::QF::poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));

    // initialize publish-subscribe
    static QP::QSubscrList subscrSto[10];
    QP::QActive::psInit(subscrSto, Q_DIM(subscrSto));

    // statically allocate event queues for the AOs and start them...
    static QP::QEvtPtr blinky_queueSto[30];
    static StackType_t stack[stack_size];
    AO_Blinky-&gt;start(1U, // priority
                     blinky_queueSto, // queue storage for events
                     Q_DIM(blinky_queueSto), //len of queue
                     stack,
                     sizeof(stack));

    QF::run(); // Normally QF Run is located in a loop 
                //but since using Arduino SDK not necessary
                // Called once to call QF::OnStartup and produce the QS trace 
}

//............................................................................
void loop() {
}

//============================================================================
// generate declarations and definitions of all AO classes (state machines)...
$declare${AOs::Blinky}
$define${AOs::Blinky}
//...

//============================================================================
// generate definitions of all AO opaque pointers...
$define${AOs::AO_Blinky}
//...
</text>
  </file>
 </directory>
</model>
